#
# ------- Provider and Backend Configuration -------
#

{% set tenant_mask = customer.tenant_id + '-' + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}

provider aws {
    access_key  = var.AWS_ACCESS_KEY_ID
    secret_key  = var.AWS_SECRET_ACCESS_KEY
    region      = "{{ terraform.AWS_DEFAULT_REGION }}"
}

provider azurerm {
    version = "=2.10.0"
    subscription_id = "{{ terraform.azure_subscription_id }}"
    client_id       = var.AZURE_CLIENT_ID
    client_secret   = var.AZURE_SECRET
    tenant_id       = var.AZURE_TENANT
    features {}
}

# Additional provider configuration for management infrastructure
provider "azurerm" {
  version = "=2.10.0"
  alias  = "mgmt"
  subscription_id = "{{ terraform.management_infra_sub_id }}"
  client_id       = var.AZURE_CLIENT_ID
  client_secret   = var.AZURE_SECRET
  tenant_id       = var.AZURE_TENANT
  features {}
}

#
# ------- Generic Resources -------
#

data "aws_route53_zone" "pri_domain" {
    name = var.camp_pri_domain
}

data "aws_route53_zone" "sec_domain" {
    name = var.camp_sec_domain
}

{% set azure_resource_group_name = customer.tenant_id + '-' + customer.cluster.environment + customer.cluster.env_number|string + '-' + terraform.region %}

resource "azurerm_resource_group" "{{ customer.tenant_id }}" {
  name      = "{{ azure_resource_group_name }}"
  location  = "{{ terraform.region }}"
  tags      = merge(var.default_tags, var.extra_tags,
               map("tenantID", "{{ customer.tenant_id }}"),
               map("customer_fullname", "{{customer.fullname}}"),
               map("Adobe:Class", "ResourceGroup"))
}

{% if terraform.provisioning_env == 'prod' %}
resource "azurerm_recovery_services_vault" "vault1" {
  name                = "{{ azure_resource_group_name }}-vault"
  location            = "{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  sku                 = "Standard"
}

resource "azurerm_backup_policy_vm" "policy1" {
  name                = "{{ azure_resource_group_name }}-policy"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  recovery_vault_name = "${azurerm_recovery_services_vault.vault1.name}"

  backup {
    frequency = "Daily"
    time      = "03:00"
  }

  retention_daily {
    count = 10
  }

  retention_weekly {
    count = 42
    weekdays = [ "Saturday" ]
  }
}
{% endif %}

#
# customer.cluster Specific Configurations
#

#
# AWS CDN Configuration
#

{% set cdn_profile_name    = customer.tenant_id + '-' + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}
{% set res_alias_name      = cdn_profile_name + '-res' + '.' + '${var.camp_sec_domain}' %}
{% set tracking_alias_name = cdn_profile_name + '-t' + '.' + '${var.camp_sec_domain}' %}

{% if terraform.provisioning_env == 'prod' or customer.cluster.no_cloudfront == False %}
  resource "aws_cloudfront_distribution" "{{ cdn_profile_name }}" {
    enabled             = true
    comment             = "Distribution for {{ cdn_profile_name }}"
    aliases             = ["{{ res_alias_name }}"]
    http_version        = "http2"
    price_class         = "PriceClass_All"
    default_root_object = ""
    web_acl_id          = ""
    wait_for_deployment = var.cloudfront_wait_for_deployment

    origin {
      domain_name = "{{ tracking_alias_name }}"
      origin_id   = "Custom-{{ tracking_alias_name }}"
      origin_path = ""

      custom_origin_config {
        origin_protocol_policy = "http-only"
        http_port              = "80"
        https_port             = "443"
        origin_ssl_protocols   = ["TLSv1.2"]
      }

    }

{% if terraform.provisioning_env == 'prod' %}
  logging_config {
    include_cookies = true
    bucket          = var.cdn_s3_bucket
    prefix          = "{{ cdn_profile_name }}"
  }
{% endif %}

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  ordered_cache_behavior {
    allowed_methods         = ["GET", "HEAD"]
    cached_methods          = ["GET", "HEAD"]
    path_pattern            = "/res/*"
    min_ttl                 = "0"
    default_ttl             = "86400"
    max_ttl                 = "31536000"
    smooth_streaming        = false
    target_origin_id        = "Custom-{{ tracking_alias_name }}"
    viewer_protocol_policy  = "allow-all"
    compress                = false

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }

    }
  }

  default_cache_behavior {
    allowed_methods         = ["GET", "HEAD", "DELETE", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods          = ["GET", "HEAD"]
    min_ttl                 = "0"
    default_ttl             = "86400"
    max_ttl                 = "31536000"
    smooth_streaming        = false
    target_origin_id        = "Custom-{{ tracking_alias_name }}"
    viewer_protocol_policy  = "allow-all"
    compress                = true

    forwarded_values {
      query_string  = true
      headers       = ["*"]

      cookies {
        forward = "all"
      }

    }
  }

  viewer_certificate {
    acm_certificate_arn       = var.cdn_ssl_certificate_id
    ssl_support_method        = "sni-only"
    minimum_protocol_version  = "TLSv1.2_2018"
  }
}

{% endif %}

#
# ------- Storage -------
#----- Change for blob Storage------
{% set num_range = range(1,99999999999) | random  %}
resource "azurerm_storage_account" "{{ customer.name }}sa" {
  name                    = "campaign{{ num_range | string | truncate (23, True, end="")}}"
  resource_group_name     = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  location                = "{{ terraform.region }}"
  account_kind            = "StorageV2"
  account_tier            = "Premium"
  account_replication_type= "LRS"
  tags                    = "${merge(var.default_tags, var.extra_tags,
                             map("tenantID" ,"{{ customer.tenant_id }}"),
                             map("customer_fullname", "{{customer.fullname}}"),
                             map("Adobe:Class", "StorageAccount"),
                             map("Adobe:DataClassification", "Confidential"))
                             }"
 # provisioner "local-exec" {
    # command =<<-EOT
      # az storage account update --allow-blob-public-access false --ids "${azurerm_storage_account.{{customer.name}}sa.id}"
    # EOT
  # }
}

resource "azurerm_storage_container" "{{ customer.tenant_id }}_images" {
  name                  = "{{ customer.tenant_id }}-{{ terraform.region }}"
  storage_account_name  = "${azurerm_storage_account.{{ customer.name }}sa.name}"
  container_access_type = "private"
}

#
# ------- AWS DNS Entries -------
#

{% set customer_dns_prefix = customer.tenant_id + '-' + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}
{% set lb_dns_name = customer_dns_prefix + '-lb.' + "${var.camp_pri_domain}" %}
{% set adobeio_dns_name = customer_dns_prefix + '-adobeio.' + '${var.camp_pri_domain}' %}
{% set console_dns_name = customer_dns_prefix %}
{% set tracking_name = customer.tenant_id + '-t' %}
{% set tracking_dns_name = customer_dns_prefix + '-t' %}
{% set mirror_dns_name = customer_dns_prefix + '-m' %}
{% set mirror_name = customer.tenant_id  + '-m' %}
{% set resources_dns_name = customer_dns_prefix + '-res' %}
{% set primary_env_dns = customer.tenant_id + '.' + '${var.camp_pri_domain}' %}

resource "aws_route53_record" "{{ customer_dns_prefix }}-Primary-Instance-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ customer_dns_prefix }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ customer_dns_prefix  }}-1.${var.camp_pri_domain}"]
}

{% if customer.cluster.env_number|string == "1" %}
resource "aws_route53_record" "{{ customer_dns_prefix }}-Primary-Cluster-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ primary_env_dns }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ customer_dns_prefix  }}-1.${var.camp_pri_domain}"]
}
{% endif %}

resource "aws_route53_record" "{{ customer_dns_prefix }}-A-record-" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ lb_dns_name }}"
  type    = "A"
  ttl     = "300"
  records = ["${azurerm_public_ip.{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}.ip_address}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-VM-A-record-" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ customer_dns_prefix }}-${count.index+1}"
  count   = {{ customer.cluster.number_of_instances }}
  type    = "A"
  ttl     = "300"
  records = ["${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.ip_address,count.index)}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-VM-A-record2-" {
  zone_id = "${data.aws_route53_zone.sec_domain.zone_id}"
  name    = "{{ customer_dns_prefix }}-${count.index+1}"
  count   = {{ customer.cluster.number_of_instances }}
  type    = "A"
  ttl     = "300"
  records = ["${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.ip_address,count.index)}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-tracking-SEC-CNAME-record" {
  zone_id = "${data.aws_route53_zone.sec_domain.zone_id}"
  name    = "{{ tracking_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-adobeio-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ adobeio_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-tracking-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ tracking_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-mirror-SEC-CNAME-record" {
  zone_id = "${data.aws_route53_zone.sec_domain.zone_id}"
  name    = "{{ mirror_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-mirror-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ mirror_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

resource "aws_route53_record" "{{ customer_dns_prefix }}-CNAME-record" {
  zone_id = "${data.aws_route53_zone.sec_domain.zone_id}"
  name    = "{{ customer_dns_prefix }}"
  type    = "CNAME"
  ttl     = "300"
  records = ["{{ lb_dns_name }}"]
}

  resource "aws_route53_record" "{{ customer_dns_prefix }}-resources-SEC-CNAME-record" {
    zone_id = "${data.aws_route53_zone.sec_domain.zone_id}"
    name    = "{{ resources_dns_name }}"
    type    = "CNAME"
    ttl     = "300"
    {% if terraform.provisioning_env == 'prod' or customer.cluster.no_cloudfront == False %}
    records = ["${aws_cloudfront_distribution.{{ cdn_profile_name }}.domain_name}"]
    {% else %}
    records = ["{{ lb_dns_name }}"]
    {% endif %}
  }


resource "aws_route53_record" "{{ customer_dns_prefix }}-resources-CNAME-record" {
  zone_id = "${data.aws_route53_zone.pri_domain.zone_id}"
  name    = "{{ resources_dns_name }}"
  type    = "CNAME"
  ttl     = "300"
  {% if terraform.provisioning_env == 'prod' or customer.cluster.no_cloudfront == False %}
  records = ["${aws_cloudfront_distribution.{{ cdn_profile_name }}.domain_name}"]
  {% else %}
  records = ["{{ lb_dns_name }}"]
  {% endif %}
}

#
# ------- Networking -------
#

{% set azure_tenant_with_region = tenant_mask + '-' + terraform.region %}

{% if terraform.provisioning_env == 'prod' %}
resource "azurerm_virtual_network" "{{ tenant_mask }}" {
  name = "{{ azure_tenant_with_region }}"
  location = "{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  address_space       = ["{{ terraform.vnet_space }}"]

  tags  = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{customer.fullname}}"),
                                   map("Adobe:Class", "vnet"))}"
}

resource "azurerm_subnet" "{{ customer.tenant_id }}-subnet" {
  name                 = "{{ azure_tenant_with_region }}"
  resource_group_name  = azurerm_resource_group.{{ customer.tenant_id }}.name
  virtual_network_name = azurerm_virtual_network.{{ tenant_mask }}.name
  address_prefix       = "{{ terraform.vnet_space }}"
  service_endpoints    = ["Microsoft.Sql"]
}

resource "azurerm_virtual_network_peering" "{{ customer.tenant_id }}-vnet-peer" {
  name                      = "{{ tenant_mask }}-vnet-peer"
  resource_group_name       = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  virtual_network_name      = "${azurerm_virtual_network.{{ tenant_mask }}.name}"
  remote_virtual_network_id = "{{ terraform.management_infra_vnet_id }}"
  allow_virtual_network_access = true
}

resource "azurerm_virtual_network_peering" "{{ customer.tenant_id }}-mgmt-peer" {
  provider                  = "azurerm.mgmt"
  name                      = "{{ tenant_mask }}-mgmt-peer"
  resource_group_name       = "{{ terraform.management_infra_vnet_resource_group }}"
  virtual_network_name      = "{{ terraform.management_infra_vnet_name }}"
  remote_virtual_network_id = "${azurerm_virtual_network.{{ tenant_mask }}.id}"
  allow_virtual_network_access = true
}

{% endif %}

{% set profile_name = customer.tenant_id + '-' + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}

resource "azurerm_public_ip" "{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}" {
  name                          = "{{ azure_tenant_with_region }}"
  location                      = "{{ terraform.region }}"
  resource_group_name           = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  allocation_method  = "Static"
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{customer.fullname}}"),
                                   map("Adobe:Class", "PUBIP"))}"
}

resource "azurerm_network_security_group" "{{ tenant_mask }}-nsg" {
  name                = "{{ azure_tenant_with_region }}"
  location            = "{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  tags                = "${merge(var.default_tags, var.extra_tags,
                         map("tenantID" ,"{{ customer.tenant_id }}"),
                         map("customer_fullname", "{{customer.fullname}}"),
                         map("Adobe:Class", "NSG"))}"
}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_rules" {
  name                        = "allow_internal_${count.index+200}"
  count                       = "{{ customer.cluster.number_of_instances }}"
  priority                    = "${count.index+200}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "${element(azurerm_network_interface.{{ tenant_mask }}-ni.*.private_ip_address,count.index)}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

{% for hostname, ip in nagios_server_allow.items() %}
resource "azurerm_network_security_rule" "{{hostname}}-{{ tenant_mask }}_allow_nagios_server" {
  name                        = "{{hostname}}-{{ tenant_mask }}-allow-all-nexpose"
  priority                    = "{{ 250 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}
{% endfor %}

{% for hostname, ip in inbound_ssh.items() %}
resource "azurerm_network_security_rule" "{{ hostname }}-ssh-inbound" {
  name                        = "{{ hostname }}-ssh-inbound"
  priority                    = "{{ 600 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "22"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}
{% endfor %}

{% for hostname, ip in postfix_azure_mx_allow.items() %}
resource "azurerm_network_security_rule" "{{ hostname }}-email-inbound" {
  name                        = "{{ hostname }}-email-inbound"
  priority                    = "{{ 800 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "25"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}
{% endfor %}

{% if nagios_allow is defined %}
{% for name,ip in nagios_allow.items() %}
resource "azurerm_network_security_rule" "{{ tenant_mask }}_allow_all_nagios_{{name}}" {
  name                        = "{{ tenant_mask }}-allow-all-nagios-{{name}}"
  priority                    = "{{ 400 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}
{% endfor %}
{%endif %}

{% if qe_jenkins_allow is defined %}
{% for name,ip in qe_jenkins_allow.items() %}
resource "azurerm_network_security_rule" "{{ tenant_mask }}_allow_all_qejenkins_{{name}}" {
  name                        = "{{ tenant_mask }}-allow-all-qejenkins-{{name}}"
  priority                    = "{{ 700 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

{% endfor %}
{%endif %}

{% if qe_ethos_allow is defined %}
{% for name,ip in qe_ethos_allow.items() %}
resource "azurerm_network_security_rule" "{{ tenant_mask }}_allow_all_qeethos_{{name}}" {
  name                        = "{{ tenant_mask }}-allow-all-qeethos-{{name}}"
  priority                    = "{{ 720 + loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "{{ ip }}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

{% endfor %}
{%endif %}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_statd" {
  name                        = "statd_7777"
  priority                    = "300"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "${azurerm_public_ip.{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}.ip_address}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_azure_lb" {
  name = "azure_lb"
  priority = "100"
  direction = "Inbound"
  access = "Allow"
  protocol = "Tcp"
  source_port_range = "*"
  destination_port_range = "*"
  source_address_prefix = "AzureLoadBalancer"
  destination_address_prefix = "*"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_webtraffic" {
  name = "webtraffic"
  priority = "101"
  direction = "Inbound"
  access = "Allow"
  protocol = "Tcp"
  source_port_range = "*"
  destination_port_ranges = var.webtraffic_ports
  source_address_prefixes = {{ customer.incoming_https_hosts | tojson() }}
  destination_address_prefix = "*"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_deny_in_rules" {
  name                        = "deny_all_in"
  priority                    = "1000"
  direction                   = "Inbound"
  access                      = "Deny"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

resource "azurerm_network_security_rule" "{{ tenant_mask }}-nsg_deny_out_rules" {
  name = "deny_all_internet"
  priority = "1000"
  direction = "Outbound"
  access = "Allow"
  protocol = "*"
  source_port_range = "*"
  destination_port_range = "*"
  source_address_prefix = "*"
  destination_address_prefix = "INTERNET"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}

{% for i in range(customer.cluster.number_of_instances) %}
resource "azurerm_network_security_rule" "{{ tenant_mask }}_{{i}}-allow_web" {
  name                        = "{{ tenant_mask }}-allow_web-{{i}}"
  priority                    =  "{{ 500 +loop.index }}"
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_ranges      = var.webtraffic_ports
  source_address_prefix       = "${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.ip_address,{{i}})}"
  destination_address_prefix  = "*"
  resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
}
{% endfor %}

#
# ------- Postgres -------
#

{% set azure_pg_hostname = customer.tenant_id + "-" + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}
{% set azure_pg_resource = customer.tenant_id + "pg" + customer.cluster.type + '-' + customer.cluster.environment + customer.cluster.env_number|string %}

resource "azurerm_postgresql_server" "{{ azure_pg_resource }}" {
  name                 = "{{ azure_pg_hostname }}"
  resource_group_name  = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  location             = "{{ terraform.region }}"
  version = "{{ customer.cluster.db_version }}"
  ssl_enforcement_enabled          = false

  {% if terraform.test_pipeline == 'False'  %}
  tags = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("AzPGParameterKey", "a0973102-f5fa-44fa-85d9-f8333456c37e"),
                                   map("customer_fullname", "{{ customer.fullname }}"),
                                   map("Adobe:Class", "db"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("CMDB_Hostname", "{{ azure_pg_hostname }}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}"),
                                   map("Adobe:ArchPath", "MC.Campaign.DBLayer")
                                   )}"
  {% else %}
  tags = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("AzPGParameterKey", "a0973102-f5fa-44fa-85d9-f8333456c37e"),
                                   map("customer_fullname", "{{ customer.fullname }}"),
                                   map("Adobe:Class", "db"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("CMDB_Hostname", "{{ azure_pg_hostname }}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}"),
                                   map("Adobe:ArchPath", "MC.Campaign.DBLayer")
                                   )}"
  {% endif %}

  administrator_login = "{{ customer.cluster.db_username }}"
  administrator_login_password = var.db_password
  sku_name = "{{ customer.cluster.db_sku }}"

  auto_grow_enabled = false
  storage_mb = "${ {{ customer.cluster.db_disk_size }} * 1024}"
  backup_retention_days = 14
  geo_redundant_backup_enabled = true

  lifecycle {
    prevent_destroy = false
  }
}

resource "azurerm_postgresql_virtual_network_rule" "{{ azure_pg_resource }}" {
  name                = "{{ azure_pg_hostname }}-access"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  {% if terraform.provisioning_env == 'prod' %}
  subnet_id                               = "${azurerm_subnet.{{ customer.tenant_id }}-subnet.id}"
  {% else %}
  subnet_id                               = "{{ customer.cluster.subnet_id }}"
  {% endif %}
}

resource "azurerm_postgresql_firewall_rule" "{{ azure_pg_resource }}"  {
  name                = "cluster_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}_access"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  start_ip_address    = "${azurerm_public_ip.{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}.ip_address}"
  end_ip_address      = "${azurerm_public_ip.{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}.ip_address}"
}

{% if qe_jenkins_allow is defined %}
{% for name,ip in qe_jenkins_allow.items() %}

resource "azurerm_postgresql_firewall_rule" "{{ azure_pg_resource }}-{{ name }}"  {
  name                = "{{ name }}_access"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  start_ip_address    = "{{ ip }}"
  end_ip_address      = "{{ ip }}"
}

{% endfor %}
{% endif %}


{% if qe_ethos_db_allow is defined %}
{% for name,ip in qe_ethos_db_allow.items() %}
{% set first_ip, last_ip =  ip.split('-')  %}
resource "azurerm_postgresql_firewall_rule" "{{ azure_pg_resource }}-{{ name }}"  {
  name                = "{{ name }}_access"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  start_ip_address    = "{{ first_ip }}"
  end_ip_address      = "{{ last_ip }}"
}

{% endfor %}
{% endif %}


resource "azurerm_postgresql_configuration"  "{{ azure_pg_resource }}-workmem" {
  name                = "work_mem"
  resource_group_name  = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  value               = "102400"
}

resource "azurerm_postgresql_configuration"  "{{ azure_pg_resource }}-pgstatements" {
  name                = "pg_stat_statements.track"
  resource_group_name  = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  server_name         = "${azurerm_postgresql_server.{{ azure_pg_resource }}.name}"
  value               = "NONE"
}


#
# ------- Load Balancer -------
#

resource "azurerm_lb" "{{ tenant_mask }}_lb" {
  name                = "{{ azure_tenant_with_region }}"
  location            = "{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  tags                = "${merge(var.default_tags, var.extra_tags,
                         map("tenantID" ,"{{ customer.tenant_id }}"),
                         map("customer_fullname", "{{customer.fullname}}"),
                         map("Adobe:Class", "LB"))}"

  frontend_ip_configuration {
    name                  = "{{ azure_tenant_with_region }}"
    public_ip_address_id  = "${azurerm_public_ip.{{ customer.tenant_id }}_ip_{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}.id}"
  }
}

{% for i in [{'proto':'tcp','port':80,'check_port':80, 'load_distribution': 'Default'},
    {'proto':'tcp','port':443,'check_port':443, 'load_distribution': 'Default'},
    {'proto':'udp','port':7777,'check_port':8080, 'load_distribution': 'Default'}] %}

resource "azurerm_lb_rule" "{{ tenant_mask }}_port_{{ i.port }}" {
  name = "{{ tenant_mask }}-{{ i.port }}-{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  loadbalancer_id = "${azurerm_lb.{{ tenant_mask }}_lb.id}"
  backend_address_pool_id = "${azurerm_lb_backend_address_pool.{{ tenant_mask }}_lb_back_addr_pool.id}"
  probe_id = "${azurerm_lb_probe.{{ tenant_mask }}_lb_probe_{{ i.port }}.id}"
  protocol = "{{ i.proto }}"
  frontend_port = "{{ i.port }}"
  backend_port = "{{ i.port }}"
  frontend_ip_configuration_name = "{{ azure_tenant_with_region }}"
  load_distribution = "{{ i.load_distribution }}"
}

resource "azurerm_lb_probe" "{{ tenant_mask }}_lb_probe_{{ i.port }}" {
  name = "{{ tenant_mask }}-{{ i.port }}-{{ terraform.region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  loadbalancer_id = "${azurerm_lb.{{ tenant_mask }}_lb.id}"
  port = "{{ i.check_port }}"
}
{% endfor %}

resource "azurerm_lb_backend_address_pool" "{{ tenant_mask }}_lb_back_addr_pool" {
  name                = "{{ azure_tenant_with_region }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  loadbalancer_id     = "${azurerm_lb.{{ tenant_mask }}_lb.id}"
}


#
# ------- VM Instances & VM specific modules -------
#

resource "azurerm_availability_set" "{{customer.tenant_id}}-{{customer.cluster.type}}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}-set" {
  name                          = "{{customer.tenant_id}}-{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}"
  location                      = "{{ terraform.region }}"
  managed                       = true
  platform_fault_domain_count   = 2
  platform_update_domain_count  = "{{ customer.cluster.number_of_instances }}"
  resource_group_name           = "${azurerm_resource_group.{{customer.tenant_id}}.name}"
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{customer.fullname}}"),
                                   map("Adobe:Class", "AVSET")
                                   )}"
}

resource "azurerm_public_ip" "{{ tenant_mask }}-ip" {
  name                         = "{{ tenant_mask }}-${count.index+1}-{{ terraform.region }}"
  location                     = "{{ terraform.region }}"
  resource_group_name          = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  allocation_method = "Static"
  count                         = "{{ customer.cluster.number_of_instances }}"
}

resource "azurerm_network_interface" "{{ tenant_mask }}-ni" {
  name                          = "{{ tenant_mask }}-${count.index+1}-{{ terraform.region }}"
  count                         = "{{ customer.cluster.number_of_instances }}"
  location                      = "{{ terraform.region }}"
  enable_accelerated_networking = true
  resource_group_name           = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  tags                          = "${merge(var.default_tags, var.extra_tags, map("tenantID" ,"{{ customer.tenant_id }}"), map("customer_fullname", "{{customer.fullname}}") ,map("Adobe:Class", "NIC"))}"
  ip_configuration {
    name                                    = "{{ tenant_mask }}-${count.index+1}-{{ terraform.region }}"
    {% if terraform.provisioning_env == 'prod' %}
    subnet_id                               = "${azurerm_subnet.{{ customer.tenant_id }}-subnet.id}"
    {% else %}
    subnet_id                               = "{{ customer.cluster.subnet_id }}"
    {% endif %}
    public_ip_address_id                    = "${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.id, count.index)}"
    private_ip_address_allocation           = "dynamic"
  }
}

{% for i in range(customer.cluster.number_of_instances) %}

resource "azurerm_network_interface_backend_address_pool_association" "backend-association-{{i}}" {
  network_interface_id    = "${azurerm_network_interface.{{ tenant_mask }}-ni.*.id[{{i}}]}"
  ip_configuration_name   = "{{ tenant_mask }}-{{i+1}}-{{ terraform.region }}"
  backend_address_pool_id = "${azurerm_lb_backend_address_pool.{{ tenant_mask }}_lb_back_addr_pool.id}"
}

resource "azurerm_network_interface_security_group_association" "nsg-association-{{i}}" {
  network_interface_id      = "${azurerm_network_interface.{{ tenant_mask }}-ni.*.id[{{i}}]}"
  network_security_group_id = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.id}"
}
{% endfor %}

resource "azurerm_virtual_machine" "{{ tenant_mask }}_vm" {
  name = "{{ tenant_mask }}-${count.index+1}"
  location = "{{ terraform.region }}"
  count = "{{ customer.cluster.number_of_instances }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  availability_set_id = "${azurerm_availability_set.{{customer.tenant_id}}-{{customer.cluster.type}}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}-set.id}"
  network_interface_ids = ["${element(azurerm_network_interface.{{ tenant_mask }}-ni.*.id, count.index)}"]
  vm_size = "{{ customer.cluster.instance_type }}"
  delete_os_disk_on_termination = true

  {% if terraform.test_pipeline == 'False'  %}
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{customer.fullname}}"),
                                   map("Adobe:Class", "appserver"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("CMDB_Hostname", "{{ tenant_mask }}-${count.index+1}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:ECCID", "{{ customer.ecc_id }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}")
                                   )}"
  {% else %}
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{customer.fullname}}"),
                                   map("Adobe:Class", "appserver"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("CMDB_Hostname", "{{ tenant_mask }}-${count.index+1}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}")
                                   )}"
  {% endif %}

  storage_os_disk {
    name              = "{{ tenant_mask }}-${count.index+1}"
    create_option     = "FromImage"
    os_type           = "Linux"
  }

  storage_image_reference {
    publisher = var.azure_image["publisher"]
    offer     = var.azure_image["offer"]
    sku       = var.azure_image["sku"]
    version   = var.azure_image["version"]
  }

  os_profile {
    computer_name   = "{{ tenant_mask }}-${count.index+1}"
    admin_username  = "campaign"
    admin_password  = ""
  }

  os_profile_linux_config {
    disable_password_authentication = true

    ssh_keys {
      path     = "/home/campaign/.ssh/authorized_keys"
      key_data = "{{ terraform.vars.ssh_key }}"
    }
  }
}

resource "azurerm_managed_disk" "data_disk" {
  name                 = "{{ tenant_mask }}-datadisk-${count.index+1}"
  count                = "{{ customer.cluster.number_of_instances }}"
  location             = "{{ terraform.region }}"
  resource_group_name  = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  storage_account_type = "Premium_LRS"
  create_option        = "Empty"
  disk_size_gb         = "{{ customer.cluster.instance_disk_size }}"
}

resource "azurerm_virtual_machine_data_disk_attachment" "data_disk" {
  managed_disk_id    = "${element(azurerm_managed_disk.data_disk.*.id, count.index)}"
  count              = "{{ customer.cluster.number_of_instances }}"
  virtual_machine_id = "${element(azurerm_virtual_machine.{{ tenant_mask }}_vm.*.id, count.index)}"
  lun                = "1"
  caching            = "ReadWrite"
}

resource "azurerm_managed_disk" "sftp_disk" {
  name                 = "{{ tenant_mask }}-sftpdisk-1"
  location             = "{{ terraform.region }}"
  resource_group_name  = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  storage_account_type = "Premium_LRS"
  create_option        = "Empty"
  disk_size_gb         = "{{ customer.cluster.extra_storage_disk_size }}"
}

resource "azurerm_virtual_machine_data_disk_attachment" "sftp_disk" {
  managed_disk_id    = "${azurerm_managed_disk.sftp_disk.id}"
  virtual_machine_id = "${element(azurerm_virtual_machine.{{ tenant_mask }}_vm.*.id, 0)}"
  lun                = "2"
  caching            = "ReadWrite"
}

{% for i in range(customer.cluster.number_of_instances) %}
  resource "azurerm_network_security_rule" "{{ customer.name }}-{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}_{{i}}-allow_acp" {
    name                        = "{{ customer.name }}-{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}-{{i}}"
    priority                    =  "{{ 790 +loop.index }}"
    direction                   = "Inbound"
    access                      = "Allow"
    protocol                    = "*"
    source_port_range           = "*"
    destination_port_range      = "8080"
    source_address_prefix       = "${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.ip_address,{{i}})}"
    destination_address_prefix  = "*"
    resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
    network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
  }
  {% if terraform.provisioning_env == 'prod' %}
  resource "azurerm_backup_protected_vm" "vm{{i}}" {
    resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
    recovery_vault_name = "${azurerm_recovery_services_vault.vault1.name}"
    source_vm_id        = "${element(azurerm_virtual_machine.{{ tenant_mask }}_vm.*.id, {{i}})}"
    backup_policy_id    = "${azurerm_backup_policy_vm.policy1.id}"
  }
  {% endif %}
  {% endfor %}

#
# ----------------Sink Servers for QE ----------------------------------
#
{% if qe_options.deploy_sink_qe == 'true'%}
resource "azurerm_public_ip" "{{ tenant_mask }}-sink-ip" {
  name                         = "{{ tenant_mask }}-sink-${count.index+1}-{{ terraform.region }}"
  location                     = "{{ terraform.region }}"
  resource_group_name          = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  allocation_method = "Static"
  count                         = "{{ customer.cluster.number_of_instances }}"
}

resource "azurerm_network_interface" "{{ tenant_mask }}-sink-ni" {
  name                          = "{{ tenant_mask }}-sink-ni-${count.index+1}-{{ terraform.region }}"
  count                         = "{{ customer.cluster.number_of_instances }}"
  location                      = "{{ terraform.region }}"
  enable_accelerated_networking = true
  resource_group_name           = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  tags                          = "${merge(var.default_tags, var.extra_tags, map("tenantID" ,"{{ customer.tenant_id }}"), map("customer_fullname", "{{customer.fullname}}"), map("Adobe:Class", "NIC"))}"
  ip_configuration {
    name                                    = "{{ tenant_mask }}-${count.index+1}-{{ terraform.region }}"
    {% if terraform.provisioning_env == 'prod' %}
    subnet_id                               = "${azurerm_subnet.{{ customer.tenant_id }}-subnet.id}"
    {% else %}
    subnet_id                               = "{{ customer.cluster.subnet_id }}"
    {% endif %}
    public_ip_address_id                    = "${element(azurerm_public_ip.{{ tenant_mask }}-sink-ip.*.id, count.index)}"
    private_ip_address_allocation           = "dynamic"
  }
}

{% for i in range(customer.cluster.number_of_instances) %}
resource "azurerm_network_interface_security_group_association" "nsg-association-sink-{{i}}"{
  network_interface_id      = "${azurerm_network_interface.{{ tenant_mask }}-sink-ni.*.id[{{i}}]}"
  network_security_group_id = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.id}"
}
{% endfor %}

resource "azurerm_virtual_machine" "{{ tenant_mask }}-sink" {
  name = "{{ customer.tenant_id }}-{{ customer.cluster.type }}-{{ customer.cluster.environment }}-{{ customer.cluster.env_number }}-sink-${count.index+1}-{{ terraform.region }}"
  location = "{{ terraform.region }}"
  count = "{{ customer.cluster.number_of_instances }}"
  resource_group_name = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
  availability_set_id = "${azurerm_availability_set.{{customer.tenant_id}}-{{customer.cluster.type}}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}-set.id}"
  network_interface_ids = ["${element(azurerm_network_interface.{{ tenant_mask }}-sink-ni.*.id, count.index)}"]
  vm_size = "{{ customer.cluster.instance_type }}"
  delete_os_disk_on_termination = true

  {% if terraform.test_pipeline == 'False'  %}
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{ customer.fullname }}"),
                                   map("Adobe:Class", "qesinkserver"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("Adobe:SKMSServiceId", "2228"),
                                   map("CMDB_Hostname", "{{ tenant_mask }}-sink-{{ terraform.region }}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:ECCID", "{{ customer.ecc_id }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}")
                                   )}"
  {% else %}
  tags                          = "${merge(var.default_tags, var.extra_tags,
                                   map("tenantID" ,"{{ customer.tenant_id }}"),
                                   map("customer_fullname", "{{ customer.fullname }}"),
                                   map("Adobe:Class", "qesinkserver"),
                                   map("Adobe:NLVersion", "{{ customer.cluster.nlversion }}"),
                                   map("Adobe:SKMSServiceId", "2228"),
                                   map("CMDB_Hostname", "{{ tenant_mask }}-sink-{{ terraform.region }}"),
                                   map("Customer:Type", "{{ customer.cluster.type }}"),
                                   map("Customer:customer.cluster", "{{ customer.cluster.type }}-{{ customer.cluster.environment }}{{ customer.cluster.env_number }}")
                                   )}"
  {% endif %}

  storage_image_reference {
    publisher = var.azure_image["publisher"]
    offer     = var.azure_image["offer"]
    sku       = var.azure_image["sku"]
    version   = var.azure_image["version"]
  }

  storage_os_disk {
    name              = "{{ tenant_mask }}-sink-${count.index+1}"
    create_option     = "FromImage"
    os_type           = "Linux"
  }

  os_profile {
    computer_name   = "{{ tenant_mask }}-sink-${count.index+1}-{{ terraform.region }}"
    admin_username  = "campaign"
    admin_password  = ""
  }

  os_profile_linux_config {
    disable_password_authentication = true

    ssh_keys {
      path     = "/home/campaign/.ssh/authorized_keys"
      key_data = "{{ terraform.vars.ssh_key }}"
    }
  }
  }

  {% if sink_server_allow is defined %}
    {% for name,ip in sink_server_allow.items() %}
     resource "azurerm_network_security_rule" "{{ tenant_mask }}_allow_winbastion-{{name}}" {
      name                        = "{{ tenant_mask }}-{{name}}"
      priority                    =  "{{ 500 +loop.index }}"
      direction                   = "Inbound"
      access                      = "Allow"
      protocol                    = "*"
      source_port_range           = "*"
      destination_port_range      = "8080-8083"
      source_address_prefix       = "{{ ip }}"
      destination_address_prefix  = "*"
      resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
      network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
     }
    {% endfor %}
  {%endif %}
{% for i in range(customer.cluster.number_of_instances) %}
  resource "azurerm_network_security_rule" "{{ tenant_mask }}_{{i}}-allow_sinkmta" {
    name                        = "{{ tenant_mask }}-{{i}}"
    priority                    =  "{{ 550 +loop.index }}"
    direction                   = "Inbound"
    access                      = "Allow"
    protocol                    = "*"
    source_port_range           = "*"
    destination_port_range      = "7780"
    source_address_prefix       = "${element(azurerm_public_ip.{{ tenant_mask }}-ip.*.ip_address,{{i}})}"
    destination_address_prefix  = "*"
    resource_group_name         = "${azurerm_resource_group.{{ customer.tenant_id }}.name}"
    network_security_group_name = "${azurerm_network_security_group.{{ tenant_mask }}-nsg.name}"
  }
  {% endfor %}

{% endif %}
